From aaad24b524261f58dbe01cb4bc6d59823a882b0d Mon Sep 17 00:00:00 2001
From: HeFeng1947 <kelly1947@163.com>
Date: Fri, 6 May 2022 11:57:23 +0800
Subject: [PATCH] GL-iNet patch: support software setting phy clk mode & phy
 chip

---
 components/esp_eth/Kconfig                  | 12 +++---
 components/esp_eth/include/esp_eth_mac.h    |  3 +-
 components/esp_eth/src/esp_eth_mac_esp32.c  |  4 +-
 components/soc/src/esp32/emac_hal.c         | 47 ++++++++++-----------
 components/soc/src/esp32/include/hal/emac.h |  2 +-
 5 files changed, 33 insertions(+), 35 deletions(-)

diff --git a/components/esp_eth/Kconfig b/components/esp_eth/Kconfig
index 3ce358749b..dbfc3a887c 100644
--- a/components/esp_eth/Kconfig
+++ b/components/esp_eth/Kconfig
@@ -27,11 +27,11 @@ menu "Ethernet"
         endchoice
 
         if ETH_PHY_INTERFACE_RMII
-            choice ETH_RMII_CLK_MODE
-                prompt "RMII clock mode"
-                default ETH_RMII_CLK_INPUT
-                help
-                    Select external or internal RMII clock.
+            # choice ETH_RMII_CLK_MODE
+            #     prompt "RMII clock mode"
+            #     default ETH_RMII_CLK_INPUT
+            #     help
+            #         Select external or internal RMII clock.
 
                 config ETH_RMII_CLK_INPUT
                     bool "Input RMII clock from external"
@@ -45,7 +45,7 @@ menu "Ethernet"
                         ESP32 can generate RMII clock by internal APLL.
                         This clock can be routed to the external PHY device.
                         ESP32 supports to route the RMII clock to GPIO0/16/17.
-            endchoice
+            # endchoice
         endif
 
         if ETH_RMII_CLK_INPUT
diff --git a/components/esp_eth/include/esp_eth_mac.h b/components/esp_eth/include/esp_eth_mac.h
index 9458123a53..2d936c916a 100644
--- a/components/esp_eth/include/esp_eth_mac.h
+++ b/components/esp_eth/include/esp_eth_mac.h
@@ -305,7 +305,8 @@ typedef struct {
 *      - instance: create MAC instance successfully
 *      - NULL: create MAC instance failed because some error occurred
 */
-esp_eth_mac_t *esp_eth_mac_new_esp32(const eth_mac_config_t *config);
+// esp_eth_mac_t *esp_eth_mac_new_esp32(const eth_mac_config_t *config);
+esp_eth_mac_t *esp_eth_mac_new_esp32(const eth_mac_config_t *config, uint8_t is_clk_in);
 #endif // CONFIG_ETH_USE_ESP32_EMAC
 
 #if CONFIG_ETH_SPI_ETHERNET_DM9051
diff --git a/components/esp_eth/src/esp_eth_mac_esp32.c b/components/esp_eth/src/esp_eth_mac_esp32.c
index 818748edd1..15c3e60882 100644
--- a/components/esp_eth/src/esp_eth_mac_esp32.c
+++ b/components/esp_eth/src/esp_eth_mac_esp32.c
@@ -447,7 +447,7 @@ err:
     return ret;
 }
 
-esp_eth_mac_t *esp_eth_mac_new_esp32(const eth_mac_config_t *config)
+esp_eth_mac_t *esp_eth_mac_new_esp32(const eth_mac_config_t *config, uint8_t is_clk_in)
 {
     esp_err_t ret_code = ESP_OK;
     esp_eth_mac_t *ret = NULL;
@@ -462,7 +462,7 @@ esp_eth_mac_t *esp_eth_mac_new_esp32(const eth_mac_config_t *config)
     /* initialize hal layer driver */
     emac_hal_init(&emac->hal, descriptors, emac->rx_buf, emac->tx_buf);
     // config emac data interface
-    emac_hal_lowlevel_init(&emac->hal);
+    emac_hal_lowlevel_init(&emac->hal, is_clk_in);
     /* alloc interrupt */
     if (config->flags & ETH_MAC_FLAG_WORK_WITH_CACHE_DISABLE) {
         ret_code = esp_intr_alloc(ETS_ETH_MAC_INTR_SOURCE, ESP_INTR_FLAG_IRAM,
diff --git a/components/soc/src/esp32/emac_hal.c b/components/soc/src/esp32/emac_hal.c
index 08f123e9e8..657d713a0e 100644
--- a/components/soc/src/esp32/emac_hal.c
+++ b/components/soc/src/esp32/emac_hal.c
@@ -20,7 +20,6 @@
 
 #define ETH_CRC_LENGTH (4)
 
-#if CONFIG_ETH_RMII_CLK_OUTPUT
 static void emac_config_apll_clock(void)
 {
     /* apll_freq = xtal_freq * (4 + sdm2 + sdm1/256 + sdm0/65536)/((o_div + 2) * 2) */
@@ -46,7 +45,6 @@ static void emac_config_apll_clock(void)
         break;
     }
 }
-#endif
 
 void emac_hal_init(emac_hal_context_t *hal, void *descriptors,
                    uint8_t **rx_buf, uint8_t **tx_buf)
@@ -59,7 +57,7 @@ void emac_hal_init(emac_hal_context_t *hal, void *descriptors,
     hal->tx_buf = tx_buf;
 }
 
-void emac_hal_lowlevel_init(emac_hal_context_t *hal)
+void emac_hal_lowlevel_init(emac_hal_context_t *hal, uint8_t is_clk_in)
 {
     /* GPIO configuration */
     /* TX_EN to GPIO21 */
@@ -80,16 +78,12 @@ void emac_hal_lowlevel_init(emac_hal_context_t *hal)
     /* CRS_DV to GPIO27 */
     PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO27_U, FUNC_GPIO27_EMAC_RX_DV);
     PIN_INPUT_ENABLE(GPIO_PIN_MUX_REG[27]);
-#if CONFIG_ETH_RMII_CLK_INPUT
-#if CONFIG_ETH_RMII_CLK_IN_GPIO == 0
+
+    if(is_clk_in == 1){
     /* RMII clock (50MHz) input to GPIO0 */
     PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0_EMAC_TX_CLK);
     PIN_INPUT_ENABLE(GPIO_PIN_MUX_REG[0]);
-#else
-#error "ESP32 EMAC only support input RMII clock to GPIO0"
-#endif
-#endif
-#if CONFIG_ETH_RMII_CLK_OUTPUT
+    }else if(is_clk_in == 0){
 #if CONFIG_ETH_RMII_CLK_OUTPUT_GPIO0
     /* APLL clock output to GPIO0 (must be configured to 50MHz!) */
     PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0_CLK_OUT1);
@@ -103,7 +97,8 @@ void emac_hal_lowlevel_init(emac_hal_context_t *hal)
     PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO17_U, FUNC_GPIO17_EMAC_CLK_OUT_180);
     PIN_INPUT_DISABLE(GPIO_PIN_MUX_REG[17]);
 #endif
-#endif // CONFIG_ETH_RMII_CLK_OUTPUT
+    }
+
     /* Clock configuration */
 #if CONFIG_ETH_PHY_INTERFACE_MII
     hal->ext_regs->ex_phyinf_conf.phy_intf_sel = 0;
@@ -111,22 +106,24 @@ void emac_hal_lowlevel_init(emac_hal_context_t *hal)
     hal->ext_regs->ex_clk_ctrl.mii_clk_tx_en = 1;
 #elif CONFIG_ETH_PHY_INTERFACE_RMII
     hal->ext_regs->ex_phyinf_conf.phy_intf_sel = 4;
-#if CONFIG_ETH_RMII_CLK_INPUT
-    hal->ext_regs->ex_clk_ctrl.ext_en = 1;
-    hal->ext_regs->ex_clk_ctrl.int_en = 0;
-    hal->ext_regs->ex_oscclk_conf.clk_sel = 1;
-#elif CONFIG_ETH_RMII_CLK_OUTPUT
-    hal->ext_regs->ex_clk_ctrl.ext_en = 0;
-    hal->ext_regs->ex_clk_ctrl.int_en = 1;
-    hal->ext_regs->ex_oscclk_conf.clk_sel = 0;
-    emac_config_apll_clock();
-    hal->ext_regs->ex_clkout_conf.div_num = 0;
-    hal->ext_regs->ex_clkout_conf.h_div_num = 0;
+    if(is_clk_in == 1)
+    {
+        hal->ext_regs->ex_clk_ctrl.ext_en = 1;
+        hal->ext_regs->ex_clk_ctrl.int_en = 0;
+        hal->ext_regs->ex_oscclk_conf.clk_sel = 1;
+    }else if(is_clk_in == 0)
+    {
+        hal->ext_regs->ex_clk_ctrl.ext_en = 0;
+        hal->ext_regs->ex_clk_ctrl.int_en = 1;
+        hal->ext_regs->ex_oscclk_conf.clk_sel = 0;
+        emac_config_apll_clock();
+        hal->ext_regs->ex_clkout_conf.div_num = 0;
+        hal->ext_regs->ex_clkout_conf.h_div_num = 0;
 #if CONFIG_ETH_RMII_CLK_OUTPUT_GPIO0
-    /* Choose the APLL clock to output on GPIO */
-    REG_WRITE(PIN_CTRL, 6);
+        /* Choose the APLL clock to output on GPIO */
+        REG_WRITE(PIN_CTRL, 6);
 #endif // CONFIG_RMII_CLK_OUTPUT_GPIO0
-#endif // CONFIG_ETH_RMII_CLK_INPUT
+    }
 #endif // CONFIG_ETH_PHY_INTERFACE_MII
 }
 
diff --git a/components/soc/src/esp32/include/hal/emac.h b/components/soc/src/esp32/include/hal/emac.h
index b55d88301e..9de3613b54 100644
--- a/components/soc/src/esp32/include/hal/emac.h
+++ b/components/soc/src/esp32/include/hal/emac.h
@@ -348,7 +348,7 @@ void emac_hal_init(emac_hal_context_t *hal, void *descriptors,
 
 void emac_hal_reset_desc_chain(emac_hal_context_t *hal);
 
-void emac_hal_lowlevel_init(emac_hal_context_t *hal);
+void emac_hal_lowlevel_init(emac_hal_context_t *hal, uint8_t is_clk_in);
 
 void emac_hal_reset(emac_hal_context_t *hal);
 
-- 
2.32.0

